//
//  MessagesViewController.swift
//  MessagesExtension
//
//  Created by Craig Naumann on 6/18/16.
//  Copyright Â© 2016 Craig Naumann. All rights reserved.
//

import UIKit
import Messages

class MessagesViewController: MSMessagesAppViewController {
    
    //MARK: properties
    
    
    override func viewDidLoad() {
        super.viewDidLoad()
        // Do any additional setup after loading the view.
        print("view did load")
        
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
        print("memory warning")
    }
    
    // MARK: - Conversation Handling
    
    override func willBecomeActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the inactive to active state.
        // This will happen when the extension is about to present UI.
        
        // Use this method to configure the extension and restore previously stored state.
        print("will become active")
    }
    
    override func didResignActive(with conversation: MSConversation) {
        // Called when the extension is about to move from the active to inactive state.
        // This will happen when the user dissmises the extension, changes to a different
        // conversation or quits Messages.
        
        // Use this method to release shared resources, save user data, invalidate timers,
        // and store enough state information to restore your extension to its current state
        // in case it is terminated later.
        print("Did resign active")
    }
   
    override func didReceive(_ message: MSMessage, conversation: MSConversation) {
        // Called when a message arrives that was generated by another instance of this
        // extension on a remote device.
        
        // Use this method to trigger UI updates in response to the message.
        print("Did receive")
    }
    
    override func didStartSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user taps the send button.
        print("Did start sending")
    }
    
    override func didCancelSending(_ message: MSMessage, conversation: MSConversation) {
        // Called when the user deletes the message without sending it.
    
        // Use this to clean up state related to the deleted message.
        print("Did cancel sending")
    }
    
    override func willTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called before the extension transitions to a new presentation style.
    
        // Use this method to prepare for the change in presentation style.
        print("Will transition to")
    }
    
    override func didTransition(to presentationStyle: MSMessagesAppPresentationStyle) {
        // Called after the extension transitions to a new presentation style.
    
        // Use this method to finalize any behaviors associated with the change in presentation style.
        print("Did transition to")
    }
    
    
    func tryInsert() {
        let conv = self.activeConversation
        let urlComps = NSURLComponents(string: "")
        let url = urlComps?.url
        print("url is: ", url)
        let sess = MSSession.init()
        let message = MSMessage.init(session: sess)
        let layout = MSMessageTemplateLayout.init()
        layout.mediaFileURL = URL.init(string: "https://encrypted-tbn2.gstatic.com/images?q=tbn:ANd9GcTtPVVMM6zsiGBFN08BFGzTsVjQrxn527ywviuOtEq9WlTfZNCwCg")
        layout.imageTitle = "Hey"
        layout.imageSubtitle = "How are you?"
        layout.caption = "Lets try this"
        message.url = url
        message.layout = layout
        //conv?.insertText("Hello there", completionHandler: nil)
        conv?.insert(message, localizedChangeDescription: "No Change", completionHandler: { (error) -> Void in
            print("Completed!!!")
            print(error)
        })
        print("Inserted?")
    }

    @IBAction func onClick(_ sender: UIButton) {
        print("click")
        tryInsert()
    }
    
}
